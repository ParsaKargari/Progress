{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { resolveResponse } from './helpers';\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject) => __awaiter(void 0, void 0, void 0, function* () {\n  const Res = yield resolveResponse();\n  if (error instanceof Res) {\n    error.json().then(err => {\n      reject(new StorageApiError(_getErrorMessage(err), error.status || 500));\n    }).catch(err => {\n      reject(new StorageUnknownError(_getErrorMessage(err), err));\n    });\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error));\n  }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n  if (method === 'GET') {\n    return params;\n  }\n  params.headers = Object.assign({\n    'Content-Type': 'application/json'\n  }, options === null || options === void 0 ? void 0 : options.headers);\n  params.body = JSON.stringify(body);\n  return Object.assign(Object.assign({}, params), parameters);\n};\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      fetcher(url, _getRequestParams(method, options, parameters, body)).then(result => {\n        if (!result.ok) throw result;\n        if (options === null || options === void 0 ? void 0 : options.noResolveJson) return result;\n        return result.json();\n      }).then(data => resolve(data)).catch(error => handleError(error, reject));\n    });\n  });\n}\nexport function get(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'GET', url, options, parameters);\n  });\n}\nexport function post(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n  });\n}\nexport function put(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n  });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n  });\n}","map":{"version":3,"names":["StorageApiError","StorageUnknownError","resolveResponse","_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","handleError","reject","__awaiter","Res","json","then","status","catch","_getRequestParams","method","options","parameters","body","params","headers","Object","assign","_handleRequest","fetcher","url","Promise","resolve","result","ok","noResolveJson","data","get","post","put","remove"],"sources":["/Users/vishnudhanda/Documents/GitHub/Progress/frontend/node_modules/@supabase/storage-js/src/lib/fetch.ts"],"sourcesContent":["import { StorageApiError, StorageUnknownError } from './errors'\nimport { resolveResponse } from './helpers'\nimport { FetchParameters } from './types'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\n  const Res = await resolveResponse()\n\n  if (error instanceof Res) {\n    error\n      .json()\n      .then((err) => {\n        reject(new StorageApiError(_getErrorMessage(err), error.status || 500))\n      })\n      .catch((err) => {\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\n      })\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\n  }\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return result\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}