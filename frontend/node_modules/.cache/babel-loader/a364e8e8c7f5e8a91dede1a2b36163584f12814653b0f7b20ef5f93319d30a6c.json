{"ast":null,"code":"import { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    var _a;\n    this.accessToken = null;\n    this.apiKey = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    /**\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\n     *\n     * @internal\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args));\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.transport) {\n      this.transport = options.transport;\n    } else {\n      this.transport = null;\n    }\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n    if (accessToken) {\n      this.accessToken = accessToken;\n      this.apiKey = accessToken;\n    }\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect();\n      this.connect();\n    }, this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect() {\n    if (this.conn) {\n      return;\n    }\n    if (this.transport) {\n      this.conn = new this.transport(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      return;\n    }\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(this._endPointURL());\n      this.setupConnection();\n      return;\n    }\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\n      close: () => {\n        this.conn = null;\n      }\n    });\n    import('ws').then(({\n      default: WS\n    }) => {\n      this.conn = new WS(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      this.setupConnection();\n    });\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\n   * Returns all created channels\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n    return status;\n  }\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.disconnect();\n    return values_1;\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\n   * Sets up connection handlers.\n   *\n   * @internal\n   */\n  setupConnection() {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n    this._flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n  _onConnError(error) {\n    this.log('transport', error.message);\n    this._triggerChanError();\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n  _sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      return;\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n}\nclass WSWebSocketDummy {\n  constructor(address, _protocols, options) {\n    this.binaryType = 'arraybuffer';\n    this.onclose = () => {};\n    this.onerror = () => {};\n    this.onmessage = () => {};\n    this.onopen = () => {};\n    this.readyState = SOCKET_STATES.connecting;\n    this.send = () => {};\n    this.url = null;\n    this.url = address;\n    this.close = options.close;\n  }\n}","map":{"version":3,"names":["VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","RealtimeClient","constructor","endPoint","options","accessToken","apiKey","channels","headers","params","timeout","heartbeatIntervalMs","heartbeatTimer","undefined","pendingHeartbeatRef","ref","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","close","error","message","_resolveFetch","customFetch","_fetch","fetch","args","then","default","websocket","transport","Object","assign","_a","apikey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","bind","reconnectTimer","disconnect","connect","_endPointURL","setupConnection","WSWebSocketDummy","WS","code","reason","onclose","clearInterval","reset","getChannels","removeChannel","channel","status","unsubscribe","length","removeAllChannels","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","event","result","send","setAuth","token","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","_appendParams","vsn","rawMessage","type","_isMember","_trigger","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","address","_protocols"],"sources":["/Users/vishnudhanda/Documents/GitHub/Progress/frontend/node_modules/@supabase/realtime-js/src/RealtimeClient.ts"],"sourcesContent":["import {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeChannel from './RealtimeChannel'\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\n\nimport type { WebSocket as WSWebSocket } from 'ws'\n\ntype Fetch = typeof fetch\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocketLikeConstructor\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n  log_level?: 'info' | 'debug' | 'warn' | 'error'\n  fetch?: Fetch\n}\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\n\nconst noop = () => {}\n\ninterface WebSocketLikeConstructor {\n  new (\n    address: string | URL,\n    _ignored?: any,\n    options?: { headers: Object | undefined }\n  ): WebSocketLike\n}\n\ntype WebSocketLike = WebSocket | WSWebSocket | WSWebSocketDummy\n\ninterface WebSocketLikeError {\n  error: any\n  message: string\n  type: string\n}\n\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined'\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  apiKey: string | null = null\n  channels: RealtimeChannel[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: WebSocketLikeConstructor | null\n  heartbeatIntervalMs: number = 30000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocketLike | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  fetch: Fetch\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.transport) {\n      this.transport = options.transport\n    } else {\n      this.transport = null\n    }\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const accessToken = options?.params?.apikey\n    if (accessToken) {\n      this.accessToken = accessToken\n      this.apiKey = accessToken\n    }\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n\n    this.fetch = this._resolveFetch(options?.fetch)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    if (this.transport) {\n      this.conn = new this.transport(this._endPointURL(), undefined, {\n        headers: this.headers,\n      })\n      return\n    }\n\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(this._endPointURL())\n      this.setupConnection()\n      return\n    }\n\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\n      close: () => {\n        this.conn = null\n      },\n    })\n\n    import('ws').then(({ default: WS }) => {\n      this.conn = new WS(this._endPointURL(), undefined, {\n        headers: this.headers,\n      })\n      this.setupConnection()\n    })\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    const status = await channel.unsubscribe()\n    if (this.channels.length === 0) {\n      this.disconnect()\n    }\n    return status\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    const values_1 = await Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    )\n    this.disconnect()\n    return values_1\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): void {\n    const { topic, event, payload, ref } = data\n    const callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      callback()\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null): void {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ access_token: token })\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Use either custom fetch, if provided, or default fetch to make HTTP requests\n   *\n   * @internal\n   */\n  _resolveFetch = (customFetch?: Fetch): Fetch => {\n    let _fetch: Fetch\n    if (customFetch) {\n      _fetch = customFetch\n    } else if (typeof fetch === 'undefined') {\n      _fetch = (...args) =>\n        import('@supabase/node-fetch' as any).then(({ default: fetch }) =>\n          fetch(...args)\n        )\n    } else {\n      _fetch = fetch\n    }\n    return (...args) => _fetch(...args)\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter(\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\n    )\n  }\n\n  /**\n   * Sets up connection handlers.\n   *\n   * @internal\n   */\n  private setupConnection(): void {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error: WebSocketLikeError) =>\n        this._onConnError(error as WebSocketLikeError)\n      this.conn.onmessage = (event: any) => this._onConnMessage(event)\n      this.conn.onclose = (event: any) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  private _endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: WebSocketLikeError) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  /** @internal */\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n  /** @internal */\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n}\n\nclass WSWebSocketDummy {\n  binaryType: string = 'arraybuffer'\n  close: Function\n  onclose: Function = () => {}\n  onerror: Function = () => {}\n  onmessage: Function = () => {}\n  onopen: Function = () => {}\n  readyState: number = SOCKET_STATES.connecting\n  send: Function = () => {}\n  url: string | URL | null = null\n\n  constructor(\n    address: string,\n    _protocols: undefined,\n    options: { close: Function }\n  ) {\n    this.url = address\n    this.close = options.close\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}