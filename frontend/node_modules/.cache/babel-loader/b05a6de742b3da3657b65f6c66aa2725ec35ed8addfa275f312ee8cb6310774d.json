{"ast":null,"code":"import { supportsLocalStorage } from './helpers';\n/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\n/**\n * An error thrown when a lock cannot be acquired after some amount of time.\n *\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\n */\nexport class LockAcquireTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.isAcquireTimeout = true;\n  }\n}\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock(name, acquireTimeout, fn) {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n  }\n  const abortController = new globalThis.AbortController();\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      abortController.abort();\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n      }\n    }, acquireTimeout);\n  }\n  // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n  return await globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {\n    mode: 'exclusive',\n    ifAvailable: true\n  } : {\n    mode: 'exclusive',\n    signal: abortController.signal\n  }, async lock => {\n    if (lock) {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\n      }\n      try {\n        return await fn();\n      } finally {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\n        }\n      }\n    } else {\n      if (acquireTimeout === 0) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n        }\n        throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n      } else {\n        if (internals.debug) {\n          try {\n            const result = await globalThis.navigator.locks.query();\n            console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\n          } catch (e) {\n            console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', e);\n          }\n        }\n        // Browser is not following the Navigator LockManager spec, it\n        // returned a null lock when we didn't use ifAvailable. So we can\n        // pretend the lock is acquired in the name of backward compatibility\n        // and user experience and just run the function.\n        console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\n        return await fn();\n      }\n    }\n  });\n}","map":{"version":3,"names":["supportsLocalStorage","internals","debug","globalThis","localStorage","getItem","LockAcquireTimeoutError","Error","constructor","message","isAcquireTimeout","NavigatorLockAcquireTimeoutError","navigatorLock","name","acquireTimeout","fn","console","log","abortController","AbortController","setTimeout","abort","navigator","locks","request","mode","ifAvailable","signal","lock","result","query","JSON","stringify","e","warn"],"sources":["/Users/vishnudhanda/Documents/GitHub/Progress/frontend/node_modules/@supabase/gotrue-js/src/lib/locks.ts"],"sourcesContent":["import { supportsLocalStorage } from './helpers'\n\n/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(\n    globalThis &&\n    supportsLocalStorage() &&\n    globalThis.localStorage &&\n    globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'\n  ),\n}\n\n/**\n * An error thrown when a lock cannot be acquired after some amount of time.\n *\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\n */\nexport abstract class LockAcquireTimeoutError extends Error {\n  public readonly isAcquireTimeout = true\n\n  constructor(message: string) {\n    super(message)\n  }\n}\n\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {}\n\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock<R>(\n  name: string,\n  acquireTimeout: number,\n  fn: () => Promise<R>\n): Promise<R> {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout)\n  }\n\n  const abortController = new globalThis.AbortController()\n\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      abortController.abort()\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name)\n      }\n    }, acquireTimeout)\n  }\n\n  // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n\n  return await globalThis.navigator.locks.request(\n    name,\n    acquireTimeout === 0\n      ? {\n          mode: 'exclusive',\n          ifAvailable: true,\n        }\n      : {\n          mode: 'exclusive',\n          signal: abortController.signal,\n        },\n    async (lock) => {\n      if (lock) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name)\n        }\n\n        try {\n          return await fn()\n        } finally {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name)\n          }\n        }\n      } else {\n        if (acquireTimeout === 0) {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name)\n          }\n\n          throw new NavigatorLockAcquireTimeoutError(\n            `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n          )\n        } else {\n          if (internals.debug) {\n            try {\n              const result = await globalThis.navigator.locks.query()\n\n              console.log(\n                '@supabase/gotrue-js: Navigator LockManager state',\n                JSON.stringify(result, null, '  ')\n              )\n            } catch (e: any) {\n              console.warn(\n                '@supabase/gotrue-js: Error when querying Navigator LockManager state',\n                e\n              )\n            }\n          }\n\n          // Browser is not following the Navigator LockManager spec, it\n          // returned a null lock when we didn't use ifAvailable. So we can\n          // pretend the lock is acquired in the name of backward compatibility\n          // and user experience and just run the function.\n          console.warn(\n            '@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request'\n          )\n\n          return await fn()\n        }\n      }\n    }\n  )\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,WAAW;AAEhD;;;AAGA,OAAO,MAAMC,SAAS,GAAG;EACvB;;;EAGAC,KAAK,EAAE,CAAC,EACNC,UAAU,IACVH,oBAAoB,EAAE,IACtBG,UAAU,CAACC,YAAY,IACvBD,UAAU,CAACC,YAAY,CAACC,OAAO,CAAC,gCAAgC,CAAC,KAAK,MAAM;CAE/E;AAED;;;;;AAKA,OAAM,MAAgBC,uBAAwB,SAAQC,KAAK;EAGzDC,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;IAHA,KAAAC,gBAAgB,GAAG,IAAI;EAIvC;;AAGF,OAAM,MAAOC,gCAAiC,SAAQL,uBAAuB;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeM,aAAaA,CACjCC,IAAY,EACZC,cAAsB,EACtBC,EAAoB;EAEpB,IAAId,SAAS,CAACC,KAAK,EAAE;IACnBc,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEJ,IAAI,EAAEC,cAAc,CAAC;;EAGvF,MAAMI,eAAe,GAAG,IAAIf,UAAU,CAACgB,eAAe,EAAE;EAExD,IAAIL,cAAc,GAAG,CAAC,EAAE;IACtBM,UAAU,CAAC,MAAK;MACdF,eAAe,CAACG,KAAK,EAAE;MACvB,IAAIpB,SAAS,CAACC,KAAK,EAAE;QACnBc,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEJ,IAAI,CAAC;;IAE7E,CAAC,EAAEC,cAAc,CAAC;;EAGpB;EAEA,OAAO,MAAMX,UAAU,CAACmB,SAAS,CAACC,KAAK,CAACC,OAAO,CAC7CX,IAAI,EACJC,cAAc,KAAK,CAAC,GAChB;IACEW,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAE;GACd,GACD;IACED,IAAI,EAAE,WAAW;IACjBE,MAAM,EAAET,eAAe,CAACS;GACzB,EACL,MAAOC,IAAI,IAAI;IACb,IAAIA,IAAI,EAAE;MACR,IAAI3B,SAAS,CAACC,KAAK,EAAE;QACnBc,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,IAAI,EAAEe,IAAI,CAACf,IAAI,CAAC;;MAG9E,IAAI;QACF,OAAO,MAAME,EAAE,EAAE;OAClB,SAAS;QACR,IAAId,SAAS,CAACC,KAAK,EAAE;UACnBc,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,IAAI,EAAEe,IAAI,CAACf,IAAI,CAAC;;;KAGjF,MAAM;MACL,IAAIC,cAAc,KAAK,CAAC,EAAE;QACxB,IAAIb,SAAS,CAACC,KAAK,EAAE;UACnBc,OAAO,CAACC,GAAG,CAAC,+DAA+D,EAAEJ,IAAI,CAAC;;QAGpF,MAAM,IAAIF,gCAAgC,CACxC,sDAAsDE,IAAI,sBAAsB,CACjF;OACF,MAAM;QACL,IAAIZ,SAAS,CAACC,KAAK,EAAE;UACnB,IAAI;YACF,MAAM2B,MAAM,GAAG,MAAM1B,UAAU,CAACmB,SAAS,CAACC,KAAK,CAACO,KAAK,EAAE;YAEvDd,OAAO,CAACC,GAAG,CACT,kDAAkD,EAClDc,IAAI,CAACC,SAAS,CAACH,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CACnC;WACF,CAAC,OAAOI,CAAM,EAAE;YACfjB,OAAO,CAACkB,IAAI,CACV,sEAAsE,EACtED,CAAC,CACF;;;QAIL;QACA;QACA;QACA;QACAjB,OAAO,CAACkB,IAAI,CACV,yPAAyP,CAC1P;QAED,OAAO,MAAMnB,EAAE,EAAE;;;EAGvB,CAAC,CACF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}